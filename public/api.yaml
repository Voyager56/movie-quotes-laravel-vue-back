openapi: 3.0.0
info:
  title: MovieQuotes API
  description: This is swagger documentation for MovieQuotes Api, to use api send request to /login with username-admin password-admin and copy-paset response token to authorization modal
  version: 0.1.9

servers:
  - url: http://127.0.0.1:8000
    description: local server
  - url: http://127.0.0.1:8000
    description: production server

components:
  schemas:
   CommentResource: 
    type: object
    properties:
      quoteId:
        type: integer
        example: 1
      comment: 
        type: string
        example: "This is a comment"
      authorPhoto:
        type: string
        example: "https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png"
      authorUsername:
        type: string
        example: "admin"
   Notification: 
    type: object
    properties:
      id:
        type: integer
        example: 1
      type:
        type: string
        example: "like"
      read: 
        type: boolean
        example: 1
      to_user_id:
        type: integer
        example: 1
      from_user_id:
        type: integer
        example: 2
      created_at:
        type: string
        example: "2020-01-01 00:00:00"
      updated_at:
        type: string
        example: "2020-01-01 00:00:00"
   QuoteResource: 
    type: object
    properties:
      id: 
        type: integer
        example: 1
      quote: 
        $ref: '#/components/schemas/Quote'
      thumbnail: 
        type: string
        example: "https://image.tmdb.org/t/p/w500/khsjha27hbs"
      commentCount: 
        type: integer
        example: 1
      user: 
        $ref: '#/components/schemas/User'
      movie_name: 
        type: string
        example: "movie name"
      release_year:
        type: integer
        example: 2020
      director: 
        type: string
        example: "director"
      likes: 
        type: integer
        example: 1
      userLikes:
        type: array
        items:
          $ref: '#/components/schemas/Like'
   Comment: 
    type: object
    properties:
      id:
        type: integer
        format: int64
      body:
        type: string
        example: "This is a comment"
      created_at:
        type: string
        format: date-time
      updated_at:
        type: string
        format: date-time
      user_id: 
        type: integer
        format: int64
      quote_id: 
        type: integer
        format: int64

   Like: 
    type: object
    properties:
      quote_id:
        type: integer
        example: 1
      user_id:
        type: integer
        example: 1
      created_at:
        type: string
        example: 2020-01-01 00:00:00
      updated_at:
        type: string
        example: 2020-01-01 00:00:00
   Quote:
    type: object
    properties:
      id:
        type: integer
        format: int64
      quote:
        type: object
        properties:
          en: 
            type: string
            example: "quote"
          ka: 
            type: string
            example: "ციტატე"
      thumbnail:
        type: string
        example: "https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png"
      movie_id:
        type: integer
        format: int64
      user_id:
        type: integer
        format: int64
      created_at:
        type: string
        format: date-time
      updated_at:
        type: string
        format: date-time

   Movie: 
    type: object 
    properties: 
      id:
       type: integer
       example: 1
      created_at: 
       type: string 
       example: "2022-08-12T12:00:02.000000Z"
      updated_at:
       type: string
       example: "2022-08-12T12:00:02.000000Z"
      title:
        type: object
        properties:
          en:
            type: string
            example: "Movie Title"
          ka:
            type: string
            example: "ფილმის სახელი"
      thumbnail:
        type: string
        example: "http://127.0.0.1:8000/storage/images/FOlsCEkSKJmYP4hbtXeeKFiIsmUh8ph8p7PQQnFf.png"
      description:
        type: object
        properties:
          en:
            type: string
            example: "Movie Description"
          ka:
            type: string
            example: "ფილმის აღწერა"
      release_year:
        type: integer
        example: 2020
      budget:
        type: integer
        example: 1000000
      user_id:
        type: integer
        example: 1
   User: 
    type: object
    properties:
      id:
        type: integer
        example: 1
      username:
        type: string
        example: admin
      email:
        type: string
        example: "admin@admin.com"
      photo: 
        type: string
        example: "http://127.0.0.1:8000/storage/images/default.png"
      oauth:
        type: integer
        example: 0
      email_verified_at:
        type: string
        example: "2020-01-01 00:00:00"
      created_at: 
        type: string 
        example: "2022-08-12T12:00:02.000000Z"
      updated_at:
        type: string
        example: "2022-08-12T12:00:02.000000Z"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

paths:
  /api/login:
    post:
      summary: Logins User
      description: Logins user with username and password
      tags:
        - User
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: admin
                password:
                  type: string
                  example: admin
      responses:
        "200":
          description: JWT token
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  token:
                    type: string
                    example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vMTI3LjAuMC4xOjgwMDAvYXBpL2xvZ2luIiwiaWF0IjoxNjYwNDgwMzM1LCJleHAiOjE2NjA0ODM5MzUsIm5iZiI6MTY2MDQ4MDMzNSwianRpIjoiS044R3lIczNUWUhYbTJZVSIsInN1YiI6IjIxIiwicHJ2IjoiMjNiZDVjODk0OWY2MDBhZGIzOWU3MDFjNDAwODcyZGI3YTU5NzZmNyJ9.IvhgQRiwF9PYQkEou85KTACtdN42Jc9VrqOcOwlinfI"
                  user:
                    $ref : '#/components/schemas/User'
  /api/me:
    post:
      tags:
        - User
      security:
        - bearerAuth: []
      summary: Checks jwt token and returns a user.
      responses:
        "200":
          description: User Object
          content:
            application/json:
              schema:
                type: object
                properties:
                  user: 
                    $ref: '#/components/schemas/User'
                  status: 
                    type: string
                    example: "success"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
  /api/logout:
    post:
      tags:
        - User
      security:
        - bearerAuth: []
      summary: logs out user.
      responses:
        "200":
          description: status message
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: 
                    type: string
                    example: "success"
  /api/register:
    post:
      summary: Registers User
      description: Registers user with unique username and email (password must be confirmed)
      tags:
        - User
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: uniqueusername
                email:
                  type: string
                  example: unique@email.com
                password:
                  type: string
                  example: password
                password_confirmation:
                  type: string
                  example: password
      responses:
        "200":
          description: Registration status
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: 
                    type: string
                    example: "success"
                  token:
                    type: string
                    example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vMTI3LjAuMC4xOjgwMDAvYXBpL2xvZ2luIiwiaWF0IjoxNjYwMzkwNDAxLCJleHAiOjE2NjAzOTQwMDEsIm5iZiI6MTY2MDM5MDQwMSwianRpIjoiMUpqc0dqeHd1NmVXS1FMayIsInN1YiI6IjIxIiwicHJ2IjoiMjNiZDVjODk0OWY2MDBhZGIzOWU3MDFjNDAwODcyZGI3YTU5NzZmNyJ9.voNvHNwWNqq2M_MKPYBm00GyqVJAxDDrg7uI4Rycl9s"
                  user: 
                    $ref: '#/components/schemas/User'

  /api/movies:
    get:
      security:
        - bearerAuth: []
      summary: Get movies
      description: Returns all the movies from database
      tags:
        - Movies
      
      responses:
        '200':
          description: Movies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Movie'
    post:
      security:
        - bearerAuth: []
      tags:
        - Movies
      summary: Creates a movie
      description: Creates a movie with given values
      requestBody:
        content:
          multipart/formdata:
            schema:
              type: object
              properties:
                title_ka:
                  type: string
                title_en:       
                  type: string
                director_ka:    
                  type: string
                director_en:
                  type: string
                description_ka:
                  type: string
                description_en:
                  type: string
                release_year:
                  type: integer
                budget:
                  type: integer
                genres:
                  type: string
                image:
                  type: string
                  format: binary
      responses:
        "200":
          description: "Movie created message"
          content:
            application/json:
              schema:
                type: string
                example: "Movie created"        
  /api/movies/{id}:
    put:
      security:
        - bearerAuth: []
      tags:
        - Movies
      summary: Updates a movie
      description: Updates a movie of give id
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: integer
            example: 1
      requestBody:
        content:
          multipart/formdata:
            schema:
              type: object
              properties:
                title_ka:
                  type: string
                title_en:       
                  type: string
                director_ka:    
                  type: string
                director_en:
                  type: string
                description_ka:
                  type: string
                description_en:
                  type: string
                release_year:
                  type: integer
                budget:
                  type: integer
                genres:
                  type: string
                image:
                  type: string
                  format: binary
      responses:
        "200":
          description: "Movie updated message"
          content:
            application/json:
              schema:
                type: string
                example: "Movie updated"
    get:
      security:
        - bearerAuth: []
      tags:
        - Movies
      summary: Gets a movie
      description: Gets a movie of give id
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: integer
            example: 1
      responses:
        "200":
          description: "Movie"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
    delete:
      security:
        - bearerAuth: []
      tags:
        - Movies
      summary: Deletes a movie
      description: Deletes a movie of give id
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: integer
            example: 1
      responses:
        "200":
          description: "Movie deleted message"
          content:
            application/json:
              schema:
                type: string
                example: "Movie deleted"
  /api/movies/search:
    get:
      security:
        - bearerAuth: []
      tags:
        - Movies
      summary: Searches movies
      description: Searches movies with given values
      parameters:
        - in: query
          required: true
          name: search
          schema:
            type: string
            example: "search"
      responses:
        "200":
          description: "Movies"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Quote'
  /api/movies/movie-search:
    get:
      security:
        - bearerAuth: []
      tags:
        - Movies
      summary: Searches movies
      description: Searches movies with given values
      parameters:
        - in: query
          required: true
          name: search
          schema:
            type: string
            example: "search"
      responses:
        "200":
          description: "Movies"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Movie'
      

  /api/quotes:
    get:
      security:
        - bearerAuth: []
      summary: Get quotes
      description: Returns all the quotes from database
      tags:
        - Quotes
      
      responses:
        '200':
          description: Gets quotes with user image and movie info for quote card
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/QuoteResource'
    post:
      security:
        - bearerAuth: []
      tags:
        - Quotes
      summary: Creates a quote
      description: Creates a quote with given values
      requestBody:
        content:
          multipart/formdata:
            schema:
              type: object
              properties:
                quote_ka:
                  type: string
                quote_en:       
                  type: string
                image: 
                  type: string
                  format: binary
                movie: 
                  type: integer
                  example: 1
      responses:
        "200":
          description: "Quote created message"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: 
                    type: string
                    example: "Quote added"
  /api/quotes/{id}:

    get:
      security:
        - bearerAuth: []
      tags:
        - Quotes
      summary: Gets a quote
      description: Gets a quote of give id and its comments
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: integer
            example: 1
      responses:
        "200":
          description: "Quote"
          content:
            application/json:
              schema:
                type: object
                properties:
                  quote: 
                    $ref: '#/components/schemas/Quote'
                  comments:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comment'
    put:
      security:
        - bearerAuth: []
      tags:
        - Quotes
      summary: Updates a quote
      description: Updates a quote of give id
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: integer
            example: 1
      requestBody:
        content:
          multipart/formdata:
            schema:
              type: object
              properties:
                quote_ka:
                  type: string
                quote_en:       
                  type: string
                image: 
                  type: string
                  format: binary
      responses:
        "200":
          description: "Quote updated message"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: 
                    type: string
                    example: "Quote updated"
    delete:
      security:
        - bearerAuth: []
      tags:
        - Quotes
      summary: Deletes a quote
      description: Deletes a quote of give id
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: integer
            example: 1
      responses:
        "200":
          description: "Quote deleted message"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: 
                    type: string
                    example: "Quote deleted"
  /api/quotes/search:

    get:
      security:
        - bearerAuth: []
      tags:
        - Quotes
      summary: Searches quotes
      description: Searches quotes with given values
      parameters:
        - in: query
          required: true
          name: search
          schema:
            type: string
            example: "search"
      responses:
        "200":
          description: "Quotes"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/QuoteResource'
  /api/likes/{id}:
    post:
      security:
        - bearerAuth: []
      tags:
        - Likes
      summary: Likes a quote
      description: Likes a quote of give id and if already liked removes it
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: integer
            example: 1
      responses:
        "200":
          description: "Quote liked message"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: 
                    type: string
                    example: "Like added"

  /api/notifications:
    get:
      security:
        - bearerAuth: []
      tags:
        - Notifications
      summary: Gets notifications
      description: Gets notifications 
      responses:
        "200":
          description: "Notifications"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
  /api/notifications/all:

    post: 
      security:
        - bearerAuth: []
      tags:
        - Notifications
      summary: Marks all notifications as read
      description: Marks all notifications as read
      responses:
        "200":
          description: "Notifications marked as read"
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:: 
                    type: boolean
                    example: true
  /api/notifications/{id}:
    post:
      security:
        - bearerAuth: []
      tags:
        - Notifications
      summary: Marks a notification as read
      description: Marks a notification as read
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: integer
            example: 1
      responses:
        "200":
          description: "Notification marked as read"
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:: 
                    type: boolean
                    example: true

  /api/edit-profile:
    post:
      security:
        - bearerAuth: []
      tags:
        - Profile
      summary: Updates user profile
      description: Updates user profile with given values
      requestBody:
        content:
          multipart/formdata:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
                password_confirmation:
                  type: string
                file:
                  type: string
                  format: binary
      responses:
        "200":
          description: "Profile updated message"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: 
                    type: string
                    example: "Profile updated"


  /api/comments:
    get:
      security:
        - bearerAuth: []
      tags:
        - Comments
      summary: Gets comments
      description: Gets comments of given quote
      responses:
        "200":
          description: "Comments"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CommentResource'
  /api/comment/{id}:
    post: 
      security:
        - bearerAuth: []
      tags:
        - Comments
      summary: Adds a comment to a quote
      description: Adds a comment to a quote of given id
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: integer
            example: 1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                comment:
                  type: string
      responses:
        "200":
          description: "Comment added message"
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: 
                    type: boolean
                    example: true
  /api/genres:
    get:  
      security:
        - bearerAuth: []
      tags:
        - Genres
      summary: Gets genres
      description: Gets genres
      responses:
        "200":
          description: "Genres"
          content:
            application/json:
              schema:
                type: object
                properties:
                  genres:
                    type: array
                    items:
                      type: string
                      example: "Action"


  /api/forgot-password:
    post:
      security:
        - bearerAuth: []
      tags:
        - Forgot Password
      summary: Forgot password
      description: Forgot password with given email
      requestBody:
        content:
          applicaton/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "admin@admin.com"
      responses:
        "200":
          description: "Forgot password message"
          content:
            application/json:
              schema:
                type: string
                example: "Email sent"
  /api/reset-password/{token}:
    post:
      security:
        - bearerAuth: []
      tags:
        - Forgot Password
      summary: Reset password
      description: Reset password with given token
      parameters:
        - in: path
          required: true
          name: token
          schema:
            type: string
            example: "token"
      requestBody:
        content:
          multipart/formdata:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: "password"
                password_confirmation:
                  type: string
                  example: "password"
      responses:
        "200":
          description: "Reset password message"
          content:
            application/json:
              schema:
                type: object
                properties:
                  token: 
                    type: string
                    description: "JWT token of user"

  /api/email-verification/{token}:
    get:
      security:
        - bearerAuth: []
      tags:
        - Email Verification
      summary: Email verification
      description: Email verification with given token
      parameters:
        - in: path
          required: true
          name: token
          schema:
            type: string
            example: "token"
      responses:
        "200":
          description: "Email verified message"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: 
                    type: string
                    example: "success"
                  user:
                    $ref: '#/components/schemas/User'
        "401":
          description: "Email verification failed message"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: 
                    type: string
                    example: "error"